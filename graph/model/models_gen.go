// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Parameters struct {
	IDParameter string `json:"idParameter"`
	Name        string `json:"name"`
	Value       string `json:"value"`
}

type Project struct {
	IDProject       string                `json:"idProject"`
	Name            string                `json:"name"`
	Users           []*UserRole           `json:"users"`
	Analysis        []*ScannerAnalysis    `json:"analysis"`
	Vulnerabilities []*Vulnerability      `json:"vulnerabilities"`
	ProjectAssets   []*ProjectAssets      `json:"projectAssets"`
	Credentials     []*ProjectCredentials `json:"credentials"`
	Params          []*Parameters         `json:"params"`
}

type ProjectAssets struct {
	Details   string    `json:"details"`
	TypeAsset AssetType `json:"typeAsset"`
}

type ProjectCredentials struct {
	Label string `json:"label"`
	Value string `json:"value"`
}

type ProjectInput struct {
	Name string `json:"name"`
}

type Scanner struct {
	IDScanner string      `json:"idScanner"`
	Name      string      `json:"name"`
	Install   []string    `json:"install"`
	Run       []string    `json:"run"`
	Report    []string    `json:"report"`
	Type      ScannerType `json:"type"`
}

type ScannerAnalysis struct {
	IDAnalysis string   `json:"idAnalysis"`
	Scanner    string   `json:"scanner"`
	Cron       string   `json:"cron"`
	Params     []string `json:"params"`
	Timeout    *int     `json:"timeout"`
}

type ScannerInput struct {
	Name string `json:"name"`
}

type User struct {
	IDUser string `json:"idUser"`
	Name   string `json:"name"`
}

type UserInput struct {
	Name string `json:"name"`
}

type UserRole struct {
	Name string `json:"name"`
	Role string `json:"role"`
}

type Vulnerability struct {
	IDVuln       string     `json:"idVuln"`
	OriginalCvss float64    `json:"originalCvss"`
	RevisedCvss  float64    `json:"revisedCvss"`
	AnalysisDate string     `json:"analysisDate"`
	ScannerID    string     `json:"scannerId"`
	Cve          string     `json:"cve"`
	Cwe          string     `json:"cwe"`
	Vex          string     `json:"vex"`
	Infos        string     `json:"infos"`
	Status       string     `json:"status"`
	Origin       VulnOrigin `json:"origin"`
}

type AssetType string

const (
	AssetTypeURL         AssetType = "URL"
	AssetTypeIP          AssetType = "IP"
	AssetTypeDockerImage AssetType = "DOCKER_IMAGE"
	AssetTypeGitRepo     AssetType = "GIT_REPO"
	AssetTypeLibrary     AssetType = "LIBRARY"
	AssetTypeCots        AssetType = "COTS"
)

var AllAssetType = []AssetType{
	AssetTypeURL,
	AssetTypeIP,
	AssetTypeDockerImage,
	AssetTypeGitRepo,
	AssetTypeLibrary,
	AssetTypeCots,
}

func (e AssetType) IsValid() bool {
	switch e {
	case AssetTypeURL, AssetTypeIP, AssetTypeDockerImage, AssetTypeGitRepo, AssetTypeLibrary, AssetTypeCots:
		return true
	}
	return false
}

func (e AssetType) String() string {
	return string(e)
}

func (e *AssetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AssetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AssetType", str)
	}
	return nil
}

func (e AssetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ScannerType string

const (
	ScannerTypeURL         ScannerType = "URL"
	ScannerTypeIP          ScannerType = "IP"
	ScannerTypeDockerImage ScannerType = "DOCKER_IMAGE"
	ScannerTypeGitRepo     ScannerType = "GIT_REPO"
)

var AllScannerType = []ScannerType{
	ScannerTypeURL,
	ScannerTypeIP,
	ScannerTypeDockerImage,
	ScannerTypeGitRepo,
}

func (e ScannerType) IsValid() bool {
	switch e {
	case ScannerTypeURL, ScannerTypeIP, ScannerTypeDockerImage, ScannerTypeGitRepo:
		return true
	}
	return false
}

func (e ScannerType) String() string {
	return string(e)
}

func (e *ScannerType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScannerType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScannerType", str)
	}
	return nil
}

func (e ScannerType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VulnLevel string

const (
	VulnLevelCritical  VulnLevel = "CRITICAL"
	VulnLevelHigh      VulnLevel = "HIGH"
	VulnLevelMedium    VulnLevel = "MEDIUM"
	VulnLevelLow       VulnLevel = "LOW"
	VulnLevelInfo      VulnLevel = "INFO"
	VulnLevelNone      VulnLevel = "NONE"
	VulnLevelNotScored VulnLevel = "NOT_SCORED"
)

var AllVulnLevel = []VulnLevel{
	VulnLevelCritical,
	VulnLevelHigh,
	VulnLevelMedium,
	VulnLevelLow,
	VulnLevelInfo,
	VulnLevelNone,
	VulnLevelNotScored,
}

func (e VulnLevel) IsValid() bool {
	switch e {
	case VulnLevelCritical, VulnLevelHigh, VulnLevelMedium, VulnLevelLow, VulnLevelInfo, VulnLevelNone, VulnLevelNotScored:
		return true
	}
	return false
}

func (e VulnLevel) String() string {
	return string(e)
}

func (e *VulnLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VulnLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VulnLevel", str)
	}
	return nil
}

func (e VulnLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VulnOrigin string

const (
	VulnOriginCicd      VulnOrigin = "CICD"
	VulnOriginManual    VulnOrigin = "MANUAL"
	VulnOriginScheduled VulnOrigin = "SCHEDULED"
)

var AllVulnOrigin = []VulnOrigin{
	VulnOriginCicd,
	VulnOriginManual,
	VulnOriginScheduled,
}

func (e VulnOrigin) IsValid() bool {
	switch e {
	case VulnOriginCicd, VulnOriginManual, VulnOriginScheduled:
		return true
	}
	return false
}

func (e VulnOrigin) String() string {
	return string(e)
}

func (e *VulnOrigin) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VulnOrigin(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VulnOrigin", str)
	}
	return nil
}

func (e VulnOrigin) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
